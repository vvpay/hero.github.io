using System;
using System.Text;
using System.Diagnostics;
using System.Security;
using System.Security.Cryptography;
using System.Collections.Generic;
using System.Web;
using System.Net;
using System.IO;
using Newtonsoft.Json;

public class MainClass {
  /**
	* api key
  * 联系客服获取测试账户与域名
	*/
	public static String MERCHANT_NO = "";
	public static String API_KEY = "";
	public static String HOST = "";
	
	
	public static void Main()
	{
		//注1 !!! 所有请求参数格式均使用 首字母小写驼峰格式 eg: orderNo(订单编号), notifyUrl(通知地址), 
		//注2 !!! http|https请使用小写 (错误示例: HTTP, HTTPS) 回调地址正确示例: https://www.baidu.com  回调地址错误示例: HTTPS://www.baidu.com
		
		//查询订单
		//QueryOrder();
		
		
		//创建订单
		CreateOrder();
	}
	
	
	/*
	 * 查询订单
	 * 回调验签demo
	 * (仅供参考, 实际使用自行修改)
	 */
	public static void QueryOrder()
	{
		String host = HOST + "/query";
		String ts = ((DateTime.Now.ToUniversalTime().Ticks - 621355968000000000) / 10000000) + "";
		SortedDictionary<string, string> parameters = new SortedDictionary<string, string>();
		parameters.Add("merchantNo", MERCHANT_NO);
		parameters.Add("ts", ts);
		
		parameters.Add("orderNo", ts);
		//拼接参数
		String paramsOrder = GetParamsOrder(parameters);
		//签名
		String signStr = Sign(API_KEY, paramsOrder);
		parameters.Add("sign", signStr);
		
		string json = JsonConvert.SerializeObject(parameters);

        String response = post(host, json);
        Console.WriteLine(response);
	}
	
	/**
	 * post请求
	 */
	public static String post(String host, String jsonData)
	{
	    var request = (HttpWebRequest)WebRequest.Create(host);
		request.Method = "POST";
		request.ContentType = "application/json;charset=UTF-8";
		var byteData = Encoding.UTF8.GetBytes(jsonData);
		var length = byteData.Length;
		request.ContentLength = length;
		var writer = request.GetRequestStream();
		writer.Write(byteData, 0, length);
		writer.Close();
		var response = (HttpWebResponse)request.GetResponse();
		//结果
		var responseString = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding("utf-8")).ReadToEnd();
	    return responseString;
	}
	
	
	/**
	 *	创建订单
	 */
	public static void CreateOrder()
	{
		String ts = ((DateTime.Now.ToUniversalTime().Ticks - 621355968000000000) / 10000000) + "";
		
		SortedDictionary<string, string> parameters = new SortedDictionary<string, string>();
		parameters.Add("ts", ts);
		parameters.Add("merchantNo", MERCHANT_NO);
		
		parameters.Add("orderNo", ts);
		parameters.Add("amount", "100");
		parameters.Add("payMode", "ebank");
		//http|https请使用小写
		parameters.Add("notifyUrl", "https://www.baidu.com/");
		parameters.Add("returnUrl", "");
		parameters.Add("payName", "张三");
		parameters.Add("userId", "123456");
		
		//拼接参数
		String paramsOrder = GetParamsOrder(parameters);
		//签名
		String signStr = Sign(API_KEY, paramsOrder);
		//UrlEncode
		parameters.Add("sign", signStr);
				
		string json = JsonConvert.SerializeObject(parameters);
		
		String host = HOST;

		String response = post(host, json);
        Console.WriteLine(response);
  
	}
	
	
	
	/*
	 * 签名
	 */
	public static String Sign(String apiKey, String paramsOrder)
	{
		String signStr = paramsOrder + "&key=" + API_KEY;
		return MD5Encrypt(signStr);
	}


	 public static string MD5Encrypt(string str)
	 {
		MD5 md5 = MD5.Create();
		// 将字符串转换成字节数组
		byte[] byteOld = Encoding.UTF8.GetBytes(str);
		// 调用加密方法
		byte[] byteNew =  md5.ComputeHash(byteOld);
		// 将加密结果转换为字符串
		StringBuilder sb = new StringBuilder();
		foreach (byte b in byteNew)
		{
			// 将字节转换成16进制表示的字符串，
			sb.Append(b.ToString("x2"));
		}
		// 返回加密的字符串
		return sb.ToString();
	 }

	/*
	 * 排序拼接
	 */
	public static string GetParamsOrder(IDictionary<string, string> parameters)
	{
		//排序
		IDictionary<string, string> sortedParams = new SortedDictionary<string, string>(parameters);
		IEnumerator<KeyValuePair<string, string>> dem = sortedParams.GetEnumerator();

		//拼接
		StringBuilder query = new StringBuilder("");
		while (dem.MoveNext())
		{
			string key = dem.Current.Key;
			string value = dem.Current.Value;
			if (!string.IsNullOrEmpty(key) && !string.IsNullOrEmpty(value) && !"sign".Equals(key))
			{
				query.Append(key).Append("=").Append(WebUtility.UrlEncode(value)).Append("&");				
			}
		}
		return query.ToString().Substring(0, query.Length - 1);
	}
}